#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import mysql.connector
import re

from sys import exit

__version__ = '0.03'
__author__ = 'Sandro CAZZANIGA'
__license__ = "GPLv3+"
__maintainer__ = "Sandro CAZZANIGA"
__email__ = "cazzaniga.sandro@gmail.com"
__status__ = "Development"

# FUNCTIONS
def getAllDatabases(cnx):
    ''' 
        Function that retrieves the names of all
        databases these are on the server and returns 
        a list of these names

        Parameter : mysql.connector.connect() cnx
        Return : str list
    '''
    cursor = cnx.cursor()
    query = "SHOW DATABASES"
    cursor.execute(query)

    databases = list()
    pattern = re.compile('^(.*)schema$')

    for db in cursor:
        if not pattern.match(db[0]):
            databases.append(db[0])

    return(databases)

def getCnx(user, password, database):
    '''
        Build a mysql connection with the 
        given parameters

        Parameter : str user
        Parameter : str password
        Parameter : str database
        Return : mysql.connector.connect() cnx
    '''

    try:
        cnx = mysql.connector.connect(user=user, password=password, 
                                        host='localhost', database=database, buffered=True)
    except mysql.connector.Error as err:
        if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
            msg("Something is wrong with your user name or password")
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            msg("Database does not exist")
        else:
            msg(err)
        exit(1)
    return(cnx)

def optimizeDatabase(user, password, database):
    '''
        Function which will launch optimize on
        all tables in the database specified in
        args (via sql connection)

        Parameter : str user
        Parameter : str password
        Parameter : str database

        Return : True if OK, false if not
    '''
    cnx = getCnx(user, password, database)
    cursor = cnx.cursor()
    query = "SHOW TABLES"

    optimize = "OPTIMIZE TABLE "
    worker = getCnx(user, password, database)
    optimizer = worker.cursor()

    cursor.execute(query)

    for table in cursor:
        optimizer.execute(optimize + table[0])
        msg(table[0] + " optimized")

    worker.close()
    cnx.close()
    return True

def optimizeAllDatabases(sqlUser, sqlPassword, allDatabases):
    '''
        Function which will launch optimize on
        all tables in all server's databases

        Parameter : str sqlUser
        Parameter : str sqlPassword
        Parameter : str allDatabases
        Return : True if OK, false if not
    '''
    for db in allDatabases:
        if not optimizeDatabase(db):
            return False

    return True

def msg(text):
    '''
        Message display function
    '''
    print("[OPTIMIZER] " + text)

# MAIN SOFTWARE
parser = argparse.ArgumentParser(description="mysqloptimizer automates the optimization of your databases.")
parser.add_argument('-v', '--version', action='store_true', help='Print version and exit')
parser.add_argument('-u', '--user', help='SQL user')
parser.add_argument('-p', '--password', help='SQL password')
parser.add_argument('-d', '--database', help='Database you want to optimize, or use -a (--all)')
parser.add_argument('-a', '--all', action='store_true', help='Optimize all tables of all databases')

args = vars(parser.parse_args())

if args['version']:
    msg("version " + __version__)
    exit(0)

if not args['user'] or not args['password']:
    parser.print_help()
    exit(1)

user = args['user']
password = args['password'] 

if args['all']:
    if not optimizeAllDatabases(user, password, getAllDatabases()):
        exit(1)
    
elif args['database']:
    database = args['database']
    if not optimizeDatabase(user, password, database):
        exit(1)
else:
    parser.print_help()
    exit(1)

exit(0)
